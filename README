------------------------------------------------------------
Copyright 2008-2014 by Mark Gates & Hani Andreas Ibrahim

This program is free software; you can redistribute or modify it under
the terms of the GNU general public license (GPL), version 2 or later.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
merchantability or fitness for a particular purpose.

If you wish to incorporate this into non-GPL software, please contact
me regarding licensing terms.

------------------------------------------------------------
Fortran 95 getopt() and getopt_long(), similar to those in standard C library.

ch = getopt( optstring, [longopts] )
Returns next option character from command line arguments.
If an option is not recognized, it returns '?'.
If no options are left, it returns a null character, char(0).

optstring contains characters that are recognized as options.
If a character is followed by a colon, then it takes a required argument.
For example, "x" recognizes "-x", while "x:" recognizes "-x arg" or "-xarg".

optopt is set to the option character, even if it isn't recognized.
optarg is set to the option's argument.
optind has the index of the next argument to process. Initially optind=1.
Errors are printed by default. Set opterr=.false. to suppress them.

Grouped options are allowed, so "-abc" is the same as "-a -b -c".

If longopts is present, it is an array of type(option_s), where each entry
describes one long option.

   type option_s
       character(len=80) :: name
       logical           :: has_arg
       character         :: val
   end type

The name field is the option name, without the leading -- double dash.
Set the has_arg field to true if it requires an argument, false if not.
The val field is returned. Typically this is set to the corresponding short
option, so short and long options can be processed together. (But there
is no requirement that every long option has a short option, or vice-versa.)

-----
EXAMPLE
rogram f90getopt_sample
    use f90getopt
    implicit none
    !character:: ch ! Unused: ch=getopt()

    ! START For longopts only
    type(option_s):: opts(2)
    opts(1) = option_s( "alpha", .false., 'a' )
    opts(2) = option_s( "beta",  .true.,  'b' )
    ! END longopts

      do
        select case( getopt( "ab:", opts ) ) ! opts is optional (for longopts only)
            case( char(0))
                exit
            case( 'a' )
                print *, 'option alpha/a'
            case( 'b' )
                print *, 'option beta/b=', optarg
            case( '?' )
                stop
            case default
                print *, 'unhandled option ', optopt, ' (this is a bug)'
        end select
    end do
end program f90getopt_sample


Differences from C version:
- when options are finished, C version returns -1 instead of char(0),
  and thus stupidly requires an int instead of a char.
- does not support optreset
- does not support "--" as last argument
- if no argument, optarg is blank, not NULL
- argc and argv are implicit

Differences for long options:
- optional argument to getopt(), rather than separate function getopt_long()
- has_arg is logical, and does not support optional_argument
- does not support flag field (and thus always returns val)
- does not support longindex
- does not support "--opt=value" syntax, only "--opt value"
- knows the length of longopts, so does not need an empty last record
